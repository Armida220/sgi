// kate: syntax C++11;
// SGI - Copyright (C) 2012-2015 FAST Protect, Andreas Roth

#pragma once
#include <sgi/plugins/SGIItemBase.h>

namespace sgi {
namespace support {
    class SGIHostItemLog4cplus;
}

class SGIItemLog4cplus : public SGIItemBase
{
public:
    typedef support::SGIHostItemLog4cplus HostItemType;
    typedef log4cplus_plugin::Log4cplusObjectBase ObjectType;
    typedef osg::ref_ptr<ObjectType> ObjectStorageType;
    SGIItemLog4cplus(const HostItemType * hostItem=NULL, SGIItemType type=SGIItemTypeInvalid, log4cplus_plugin::Log4cplusObjectBase * object=NULL, unsigned flags=0, unsigned score=0, osg::Referenced * userData=NULL)
        : SGIItemBase(type, flags, score, userData), m_object(object) {}
    SGIItemLog4cplus(SGIItemType type, const log4cplus_plugin::Log4cplusObjectBase * object=NULL, unsigned flags=0, unsigned score=0, osg::Referenced * userData=NULL)
        : SGIItemBase(type, flags, score, userData), m_object(const_cast<log4cplus_plugin::Log4cplusObjectBase *>(object)) {}
    SGIItemLog4cplus(const SGIItemLog4cplus & rhs, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY)
        : SGIItemBase(rhs, copyop), m_object(rhs.m_object) {}
    ~SGIItemLog4cplus()
        { }

    META_Object(sgi, SGIItemLog4cplus);

    SGIItemLog4cplus & operator = (const SGIItemLog4cplus & rhs)
    {
        SGIItemBase::operator=(rhs);
        m_object = rhs.m_object;
        return *this;
    }
    ObjectType * object() { return m_object.get(); }
    ObjectType * object() const { return m_object.get(); }

protected:
    virtual int compare(const SGIItemBase & rhs) const
    {
        int ret = SGIItemBase::compare(rhs);
        if(!ret)
        {
            if(m_object == static_cast<const SGIItemLog4cplus&>(rhs).m_object)
                return 0;
            else if(m_object < static_cast<const SGIItemLog4cplus&>(rhs).m_object)
                return -1;
            else
                return 1;
        }
        else
            return ret;
    }

private:
    ObjectStorageType m_object;
};

} // namespace sgi
