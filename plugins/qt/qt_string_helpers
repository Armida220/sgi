// kate: syntax C++11;
/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
*/
//sgi - Copyright (C) 2012-2013 Andreas Roth

#pragma once

#include <sstream>
#include <iomanip>
#include <QString>
#include <QObject>

namespace sgi {

inline QString fromLocal8Bit(const std::string & str)
{
    return QString::fromLocal8Bit(str.data(), str.size());
}

inline std::string toLocal8Bit(const QString & str)
{
    QByteArray qba = str.toLocal8Bit();
    return std::string(qba.constData(), qba.size());
}

inline std::string getObjectTypename(const QObject * object)
{
    const QMetaObject * meta = object?object->metaObject():NULL;
    return meta?std::string(meta->className()):"(null)";
}

inline std::string getObjectName(const QObject * object)
{
    std::string ret = object?toLocal8Bit(object->objectName()):std::string("(null)");
    if(ret.empty())
    {
        std::stringstream buf;
        buf << (void*)object;
        ret = buf.str();
    }
    return ret;
}

inline std::string getObjectNameAndType(const QObject * object)
{
std::string name = object?toLocal8Bit(object->objectName()):std::string("(null)");
    std::stringstream buf;
    if(name.empty())
        buf << (void*)object;
    else
        buf << name;
    buf << " (" << getObjectTypename(object) << ")";
    std::string ret = buf.str();
    return ret;
}

} // namespace sgi
