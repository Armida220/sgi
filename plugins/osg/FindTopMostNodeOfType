// kate: syntax: C++

#pragma once

#include <osg/NodeVisitor>

namespace sgi {

namespace details {
    /**
     * Visitor that locates a node by its type
     */
    template<typename T>
    class FindTopMostNodeOfTypeVisitor : public osg::NodeVisitor
    {
    public:
        FindTopMostNodeOfTypeVisitor():
          osg::NodeVisitor(osg::NodeVisitor::TRAVERSE_ALL_CHILDREN),
              _foundNode(0)
          {}

          void apply(osg::Node& node)
          {
              T* result = dynamic_cast<T*>(&node);
              if (result)
              {
                  _foundNode = result;
              }
              else
              {
                  traverse(node);
              }
          }

          T* _foundNode;
    };
} // namespace details

/**
 * Searchs the scene graph upward starting at [node] and returns the first node found
 * that matches the template parameter type.
 */
template<typename T>
T* findFirstParentOfType(osg::Node* node, unsigned traversalMask =~0u)
{
    if (!node) return 0;

    details::FindTopMostNodeOfTypeVisitor<T> fnotv;
    fnotv.setTraversalMode(osg::NodeVisitor::TRAVERSE_PARENTS);
    fnotv.setTraversalMask(traversalMask);
    node->accept(fnotv);

    return fnotv._foundNode;
}

} // namespace sgi
