// kate: syntax C++;
// SGI - Copyright (C) 2012-2018 FAST Protect, Andreas Roth

#pragma once

#include <sgi/plugins/SGIItemBase.h>
#include <osg/Referenced>
#include <osg/ref_ptr>

namespace osg {
    class Node;
}

namespace sgi {

enum SGIItemType_osg
{
    SGIItemType_plugin_osg = SGIItemTypePluginBaseOsg,
    SGIItemTypeStateSetModeList,
    SGIItemTypeStateSetAttributeList,
    SGIItemTypeStateSetTextureModeList,
    SGIItemTypeStateSetTextureAttributeLists,
    SGIItemTypeStateSetUniformList,
    SGIItemTypeStateSetDefineList,
    SGIItemTypeParentalNodePath,
    SGIItemTypeDrawableTexCoordsList,
    SGIItemTypeDrawableVertexAttribArrays,
    SGIItemTypePrimitiveSetList,
	SGIItemTypeGraphicsContexts,
    SGIItemTypeGraphicsContextCameras,
    SGIItemTypeGraphicsContextOperations,
    SGIItemTypeGraphicsContextGLExtensions,
    SGIItemTypeImage,
    SGIItemTypeImageMipMap,
    SGIItemTypeShaders,
    SGIItemTypeShaderSource,
    SGIItemTypeShaderCodeInjectionMap,
    SGIItemTypeArrayData,
    SGIItemTypeEventHandlers,
    SGIItemTypeDevices,
    SGIItemTypePickerHits,
    SGIItemTypePickerHit,
    SGIItemTypeSlaves,
    SGIItemTypeActivePagedLODs,
    SGIItemTypeThreads,
    SGIItemTypeStateAttibutes,
    SGIItemTypeStateSets,
    SGIItemTypeViewerBaseScenes,
    SGIItemTypeViewerBaseViews,
    SGIItemTypeViewerBaseCameras,
    SGIItemTypeViewerBaseContexts,
    SGIItemTypeLeaves,
    SGIItemTypeRenderInfoStateSetStack,
    SGIItemTypeRenderInfoRenderBinStack,
    SGIItemTypeRenderInfoCameraStack,
    SGIItemTypeRenderInfoAppliedProgramSet,
    SGIItemTypeRenderInfoState,
    SGIItemTypeReadersWriters,
    SGIItemTypeImageProcessors,
    SGIItemTypeDatabaseRevisions,
    SGIItemTypeBufferDatas,
    SGIItemTypePendingChild,
    SGIItemTypeChannels,
    SGIItemTypeAnimations,
    SGIItemTypeSerializers,
    SGIItemTypeWrappers,
    SGIItemTypeCompressors,
    SGIItemTypeDBPagerFileRequests,
    SGIItemTypeDBPagerHttpRequests,
    SGIItemTypeDBPagerDataToCompile,
    SGIItemTypeDBPagerDataToMerge,
    SGIItemTypeColorLayers,
    SGIItemTypeCameaBufferAttachments,
	SGIItemTypeFontTextureList,
    SGIItemTypeStatsFrame,
    SGIItemTypeCachedObjects,
    SGIItemTypeTextureObjects,
    SGIItemTypeTextureSetMap,
    SGIItemTypeDrawElementsIndicies,
    SGIItemTypeCullingInfoBefore,
    SGIItemTypeCullingInfoAfter,
    SGIItemTypeBuildInfo,
};


typedef SGIItemInfoSharedPtr<osg::Referenced, osg::ref_ptr<osg::Referenced> > SGIItemInfoOsg;
typedef SGIHostItemImpl<SGIItemInfoOsg> SGIHostItemOsg;
typedef SGIItemHolderT<SGIItemInfoOsg> SGIItemHolderOsg;
typedef SGIItemT<SGIHostItemOsg, SGIItemHolderOsg> SGIItemOsg;

namespace osg_plugin {
enum NodeLookAt {
    NodeLookAtInvalid = -1,
    NodeLookAtDirect,
    NodeLookAtTopView,
    NodeLookAtFromBehind,
};

struct SetViewNodeLookAt
{
    SetViewNodeLookAt(osg::Node * node_, NodeLookAt mode_)
        : node(node_), mode(mode_) {}

    osg::ref_ptr<osg::Node> node;
    NodeLookAt mode;
};

template<typename T>
class OsgReferencedDataT : public osg::Referenced
{
public:
    OsgReferencedDataT()
        : osg::Referenced()
        , _data()
        {}
    OsgReferencedDataT(const T & data)
        : osg::Referenced()
        , _data(data)
        {}
    OsgReferencedDataT(const OsgReferencedDataT & rhs)
        : osg::Referenced(rhs)
        , _data(rhs._data)
        {}
    ~OsgReferencedDataT() override
    {
    }
    const T & data() const { return _data; }
    T & data() { return _data; }

    // compatible std::shared_ptr accessor
    const T & get() const { return _data; }
    T & get() { return _data; }

    operator const T & () const {return _data;}
    operator T & () {return _data;}
private:
    T _data;
};

typedef OsgReferencedDataT<SetViewNodeLookAt> ReferencedSetViewNodeLookAt;
} // namespace osg_plugin

} // namespace sgi
