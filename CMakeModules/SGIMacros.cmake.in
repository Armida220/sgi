# DO NOT modify this file
# This file is automatically generated by CMake

SET(SGI_MAJOR_VERSION @SGI_MAJOR_VERSION@)
SET(SGI_MINOR_VERSION @SGI_MINOR_VERSION@)
SET(SGI_PATCH_VERSION @SGI_PATCH_VERSION@)
SET(SGI_BUILD_VERSION @SGI_BUILD_VERSION@)
SET(SGI_SOVERSION @SGI_SOVERSION@)
SET(SGI_PLUGIN_DIR "osgPlugins-@OPENSCENEGRAPH_VERSION@")

MACRO(SGI_PLUGIN PLUGIN_NAME)
    SET(TARGET_MAJOR_VERSION ${SGI_MAJOR_VERSION})
    SET(TARGET_MINOR_VERSION ${SGI_MINOR_VERSION})
    SET(TARGET_PATCH_VERSION ${SGI_PATCH_VERSION})

    # here we use the command to generate the library
    #not sure if needed, but for plugins only Msvc need the d suffix
    IF(MSVC)
        SET(TARGET_NO_DEBUG_POSTFIX)
		SET(TARGET_DISABLE_PCH 1)
    ENDIF(MSVC)

    SET(TARGET_LABEL_PREFIX "SGIPlugin")
    SET(TARGET_NO_IMPORT_LIB 1)
    SET(TARGET_NO_MANIFEST 1)
    SET(TARGET_NO_LIBPREFIX 1)

	SET(_plugin_dir osgPlugins-${OPENSCENEGRAPH_VERSION})
    IF(WIN32)
        SET(TARGET_BIN_DIR ${FAST_WORK_BIN_DIR}/${_plugin_dir})
    ELSE(WIN32)
        SET(TARGET_BIN_DIR ${FAST_WORK_LIB_DIR}/${_plugin_dir})
    ENDIF(WIN32)
    SET(TARGET_INSTALL_RUNTIME_DIR ${_plugin_dir})
    SET(TARGET_INSTALL_LIBRARY_DIR ${_plugin_dir})

    SET(TARGET_VERSION ${SGI_VERSION})
    SET(TARGET_SOVERSION ${SGI_SOVERSION})
    SET(TARGET_MAJOR_VERSION ${SGI_MAJOR_VERSION})
    SET(TARGET_MINOR_VERSION ${SGI_MINOR_VERSION})
    SET(TARGET_PATCH_VERSION ${SGI_PATCH_VERSION})
    SET(TARGET_BUILD_VERSION ${SGI_SOVERSION})
    SET(TARGET_PRODUCT_NAME "SGI")
    SET(TARGET_VERSION_RC_INTERNALNAME "SGI")
    SET(TARGET_PRODUCT_COPYRIGHT ${SGI_COPYRIGHT_TEXT})
    SET(TARGET_NO_TRANSLATION 1)

    LIST(APPEND TARGET_DEFINITIONS
        SGI_PLUGIN_NAME=${PLUGIN_NAME})

    LIST(APPEND TARGET_LIBRARIES_VARS OSG_LIBRARY OSGDB_LIBRARY SGI_PLUGIN_IMPL_LIBRARY)

	FAST_MODULE_LIBRARY("osgdb_sgi_${PLUGIN_NAME}_plugin" NO_MOC_INCLUDE ${ARGN})

ENDMACRO(SGI_PLUGIN)

# -----------------------------------------------------------------------
# configure_shaders -gw
#
# Bakes GLSL shaders to make into a CPP file at runtime.
# Example:
#
#   configure_shaders( MyTemplate.cpp.in ${CMAKE_CURRENT_BINARY_DIR}/AutoGen.cpp file1.glsl file2.glsl )
#
macro(SGI_CONFIGURE_SHADERS templateFile autoGenCppFile)

    # set up configure variables:
    set(TEMPLATE_FILE   ${templateFile} )
    set(GLSL_FILES      ${ARGN} )
    set(OUTPUT_CPP_FILE ${autoGenCppFile})

    # generate the build-time script that will create out cpp file with inline shaders:
    configure_file(
        "${SGI_CMAKEMODULES_DIR}/SGIConfigureShaders.cmake.in"
        "${CMAKE_CURRENT_BINARY_DIR}/SGIConfigureShaders.cmake"
        @ONLY)

    # add the custom build-time command to run the script:
    add_custom_command(
        OUTPUT
            "${autoGenCppFile}"
        COMMAND
            "${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/SGIConfigureShaders.cmake"
        DEPENDS
            ${GLSL_FILES}
            "${TEMPLATE_FILE}"
            "${SGI_CMAKEMODULES_DIR}/SGIConfigureShaders.cmake.in" )
    set_property(SOURCE "${autoGenCppFile}" PROPERTY GENERATED ON)
    set_property(SOURCE "${autoGenCppFile}" PROPERTY SKIP_AUTOGEN ON)

endmacro(SGI_CONFIGURE_SHADERS)
