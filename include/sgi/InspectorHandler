// kate: syntax C++11;
// SGI - Copyright (C) 2012-2015 FAST Protect, Andreas Roth

#pragma once

#include "ReferencedPicker"
#include "AutoLoadOsg"
#include "plugins/SGIHostItemOsg.h"
#include "plugins/SGIHostItemInternal.h"
#include "plugins/InspectorHandler"
#include "plugins/HostCallback"
#include "plugins/ContextMenu"
#include "SGIItemInternal"

namespace sgi {

inline SceneGraphInspectorHandler::SceneGraphInspectorHandler(IHostCallback * callback)
: _hostCallback(callback)
, _picker()
, _inspectorHitTestKey('i')
, _inspectorEventKey('e')
, _inspectorLoggerKey('l')
, _inspectorLoggerModMask(osgGA::GUIEventAdapter::MODKEY_SHIFT)
, _inspectorInfoKey('Q')
, _inspectorInfoKeyModMask(osgGA::GUIEventAdapter::MODKEY_SHIFT)
, _inspectorHitTestMouseButton(osgGA::GUIEventAdapter::MIDDLE_MOUSE_BUTTON)
, _inspectorHitTestMouseLeftModMask(osgGA::GUIEventAdapter::MODKEY_LEFT_CTRL|osgGA::GUIEventAdapter::MODKEY_LEFT_SHIFT)
, _inspectorHitTestMouseRightModMask(osgGA::GUIEventAdapter::MODKEY_RIGHT_CTRL|osgGA::GUIEventAdapter::MODKEY_RIGHT_SHIFT)
, _inspectorContextMenuMouseButton(osgGA::GUIEventAdapter::RIGHT_MOUSE_BUTTON)
, _inspectorContextMenuMouseLeftModMask(osgGA::GUIEventAdapter::MODKEY_LEFT_CTRL|osgGA::GUIEventAdapter::MODKEY_LEFT_SHIFT)
, _inspectorContextMenuMouseRightModMask(osgGA::GUIEventAdapter::MODKEY_RIGHT_CTRL|osgGA::GUIEventAdapter::MODKEY_RIGHT_SHIFT)
{
}

inline SceneGraphInspectorHandler::~SceneGraphInspectorHandler()
{
}

inline bool SceneGraphInspectorHandler::showSceneGraphDialog(const SGIHostItemOsg * item)
{
    return _hostCallback->showSceneGraphDialog(NULL, item) != NULL;
}

inline bool SceneGraphInspectorHandler::showObjectLoggerDialog(const SGIHostItemOsg * item)
{
    return _hostCallback->showObjectLoggerDialog(NULL, item) != NULL;
}

inline bool SceneGraphInspectorHandler::contextMenu(const SGIHostItemOsg * item, float x, float y)
{
    IContextMenu * contextMenu = _hostCallback->contextMenu(NULL, item);
    if(contextMenu)
        contextMenu->popup(NULL, x, y);
    return (contextMenu != NULL);
}

inline bool SceneGraphInspectorHandler::handle( const osgGA::GUIEventAdapter& ea, osgGA::GUIActionAdapter& aa )
{
    if ( ea.getEventType() == ea.KEYDOWN )
    {
        if(_inspectorHitTestKey != 0 && ea.getKey() == _inspectorHitTestKey)
        {
            IHostCallback::PickerType pickerType;
            if(ea.getModKeyMask() & (osgGA::GUIEventAdapter::MODKEY_LEFT_SHIFT|osgGA::GUIEventAdapter::MODKEY_RIGHT_SHIFT))
                pickerType = IHostCallback::PickerTypeLine;
            else
                pickerType = IHostCallback::PickerTypeDefault;
            _picker = _hostCallback->createPicker(pickerType, ea.getX(), ea.getY());
            if(_picker.valid() && _picker->result())
            {
                SGIHostItemOsg itemPicker(_picker);
                showSceneGraphDialog(&itemPicker);
            }
            else
            {
                showSceneGraphDialog(NULL);
            }
        }
        else if(_inspectorInfoKey != 0 && ea.getKey() == _inspectorInfoKey &&
            ea.getModKeyMask() & (_inspectorInfoKeyModMask))
        {
            ReferencedInternalInfoData * info = new ReferencedInternalInfoData(InternalInfoData::CommandIdAbout);
            SGIHostItemInternal itemAbout(info);
            showSceneGraphDialog(&itemAbout);
        }
        else if(_inspectorEventKey != 0 && ea.getKey() == _inspectorEventKey)
        {
            SGIHostItemOsg itemEa(&ea);
            showSceneGraphDialog(&itemEa);
        }
        else if(_inspectorLoggerKey != 0 && ea.getKey() == _inspectorLoggerKey &&
                ea.getModKeyMask() & (_inspectorLoggerModMask))
        {
            SGIHostItemOsg itemEa(&ea);
            showObjectLoggerDialog(&itemEa);
        }
    }
    else if ( ea.getEventType() == ea.PUSH)
    {
        if(_inspectorHitTestMouseButton != 0 &&
                ea.getButton() == _inspectorHitTestMouseButton &&
            ( ((ea.getModKeyMask() & _inspectorHitTestMouseRightModMask) == _inspectorHitTestMouseRightModMask) ||
              ((ea.getModKeyMask() & _inspectorHitTestMouseLeftModMask) == _inspectorHitTestMouseLeftModMask) )
            )
        {
            SGIHostItemOsg itemEa(&ea);
            showSceneGraphDialog(&itemEa);
            // avoid further processing
            return true;
        }
        else if(_inspectorContextMenuMouseButton != 0 &&
                ea.getButton() == _inspectorContextMenuMouseButton &&
            ( ((ea.getModKeyMask() & _inspectorContextMenuMouseRightModMask) == _inspectorContextMenuMouseRightModMask) ||
              ((ea.getModKeyMask() & _inspectorContextMenuMouseLeftModMask) == _inspectorContextMenuMouseLeftModMask) )
            )
        {
            float x = ea.getX();
            float y = ea.getY();
            osg::Camera * camera = aa.asView()->getCamera();
            if(camera)
            {
                osg::Viewport * viewport = camera->getViewport();
                if(viewport)
                    y = viewport->height() - y;
            }
            SGIHostItemOsg itemEa(&ea);
            contextMenu(&itemEa, x, y);
            // avoid further processing
            return true;
        }

    }
    return false;
}

} // namespace sgi
