// kate: syntax C++11;
// SGI - Copyright (C) 2012-2015 FAST Protect, Andreas Roth

#pragma once

#include <osgGA/GUIEventHandler>

namespace sgi {

class ReferencedPickerBase;
typedef osg::ref_ptr<ReferencedPickerBase> ReferencedPickerBasePtr;

class ISceneGraphInspectorHandlerInfo : public osg::Referenced
{
public:
    enum PickerType {
        PickerTypeDefault,
        PickerTypeLine,
        PickerTypePolytope
    };
    virtual bool            showSceneGraphDialog(const SGIHostItemBase * item) = 0;
    virtual bool            showObjectLoggerDialog(const SGIHostItemBase * item) = 0;
    virtual ReferencedPickerBase * createPicker(PickerType type, float x, float y) = 0;
};

class SceneGraphInspectorHandler : public osgGA::GUIEventHandler
{
public:
    SceneGraphInspectorHandler(ISceneGraphInspectorHandlerInfo * info);
    virtual ~SceneGraphInspectorHandler();

    virtual bool handle( const osgGA::GUIEventAdapter& ea, osgGA::GUIActionAdapter& aa );

    ISceneGraphInspectorHandlerInfo * info() { return _info; }

protected:
    bool                showSceneGraphDialog(const SGIHostItemOsg * item);
    bool                showObjectLoggerDialog(const SGIHostItemOsg * item);

protected:
    osg::ref_ptr<ISceneGraphInspectorHandlerInfo> _info;
    ReferencedPickerBasePtr _picker;
    int                 _inspectorHitTestKey;
    int                 _inspectorEventKey;
    int                 _inspectorLoggerKey;
    int                 _inspectorLoggerModMask;
    int                 _inspectorInfoKey;
    int                 _inspectorInfoKeyModMask;
    int                 _inspectorHitTestMouseButton;
    int                 _inspectorHitTestMouseLeftModMask;
    int                 _inspectorHitTestMouseRightModMask;
};


} // namespace sgi
