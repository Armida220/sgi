// kate: syntax C++11;
// SGI - Copyright (C) 2012-2015 FAST Protect, Andreas Roth

#pragma once

#include "SettingsDialog"

namespace sgi {
namespace details {
    template<class DIALOG_CLASS>
    struct IgnoreSetObjectPolicy {
        IgnoreSetObjectPolicy(DIALOG_CLASS * dialog) {}
        void            setObject(SGIItemBase * item, ISettingsDialogInfo * info=NULL) {}
        void            setObject(const SGIHostItemBase * item, ISettingsDialogInfo * info=NULL) {}
    };
    template<class DIALOG_CLASS>
    struct PerformSetObjectPolicy {
        PerformSetObjectPolicy(DIALOG_CLASS * dialog) : _dialog(dialog) {}
        void            setObject(SGIItemBase * item, ISettingsDialogInfo * info=NULL) { _dialog->setObject(item, info); }
        void            setObject(const SGIHostItemBase * item, ISettingsDialogInfo * info=NULL) { _dialog->setObject(item, info); }
        DIALOG_CLASS * _dialog;
    };
}

template<class DIALOG_CLASS=QDialog, template<typename> class SETOBJECTPOLICY=details::IgnoreSetObjectPolicy>
class SettingsDialogImplT : public ISettingsDialog
{
public:
    SettingsDialogImplT(DIALOG_CLASS * dialog)
        : _dialog(dialog), _setObject(dialog) {}
    virtual ~SettingsDialogImplT()
        { delete _dialog; }

    virtual void            setObject(SGIItemBase * item, ISettingsDialogInfo * info=NULL) { _setObject.setObject(item, info); }
    virtual void            setObject(const SGIHostItemBase * item, ISettingsDialogInfo * info=NULL) { _setObject.setObject(item, info); }
    virtual void            show() { _dialog->show(); }
    virtual void            hide() { _dialog->hide(); }
    virtual bool            isVisible() { return _dialog->isVisible(); }
    virtual int             showModal() { return _dialog->exec(); }

protected:
    DIALOG_CLASS * _dialog;
    SETOBJECTPOLICY<DIALOG_CLASS> _setObject;
};

typedef SettingsDialogImplT<QDialog, details::IgnoreSetObjectPolicy> SettingsDialogImpl;

} // namespace sgi
