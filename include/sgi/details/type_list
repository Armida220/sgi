// kate: syntax C++11;
#pragma once

namespace sgi {
namespace details {

//A metafunction returning the index of a type T in a type_list of types L. If T doesn't belong to L, it returns -1
template<typename T>
struct type_list_size;

//The typelist template
template<typename... TYPES>
struct type_list
{
    static constexpr size_t size = type_list_size<type_list<TYPES...> >::value;
};

//Again that recursive head:tail traversal of functional languages
template<typename HEAD, typename... TAIL>
struct type_list_size<type_list<HEAD,TAIL...>>
{
    static constexpr size_t value = type_list_size<type_list<TAIL...> >::value + 1u;
};

//Second base case: The type is not found (There are no more types on the type_list to match with)
template<>
struct type_list_size<type_list<> >
{
    static constexpr size_t value = 0;
};

//A metafunction returning the index of a type T in a type_list of types L. If T doesn't belong to L, it returns -1
template<typename T , typename L>
struct index_of;

//Again that recursive head:tail traversal of functional languages
template<typename T , typename HEAD , typename... TAIL>
struct index_of<T,type_list<HEAD,TAIL...>>
{
    static constexpr int next_value = index_of<T,type_list<TAIL...> >::value;
    static constexpr int value = next_value >= 0 ? next_value + 1 : -1; //Propagate the -1 or the index
};

//First base case: The type is found (T matches HEAD)
template<typename T , typename... TAIL>
struct index_of<T,type_list<T,TAIL...>>
{
    static constexpr int value = 0;
};

//Second base case: The type is not found (There are no more types on the type_list to match with)
template<typename T>
struct index_of<T,type_list<>>
{
    static constexpr int value = -1;
};

//A metafunction returning the index of a type T in a type_list of types L. If T doesn't belong to L, it returns -1
template<typename T>
struct for_each_type_impl;

//Again that recursive head:tail traversal of functional languages
template<typename HEAD, typename... TAIL>
struct for_each_type_impl<type_list<HEAD,TAIL...>>
{
    template<typename FuncT>
    for_each_type_impl(FuncT & f)
    {
#ifdef _MSC_VER
        f.operator()<HEAD>();
#else
        f.template operator()<HEAD>();
#endif
        for_each_type_impl<type_list<TAIL...> > next(f);
    }
};

//Second base case: The type is not found (There are no more types on the type_list to match with)
template<>
struct for_each_type_impl<type_list<> >
{
    template<typename FuncT>
    for_each_type_impl(FuncT &)
    {
    }
};

template<typename LIST_OF_TYPES, typename FuncT>
void for_each_type(FuncT & f)
{
    details::for_each_type_impl<LIST_OF_TYPES> impl(f);
}


} // namespace details
} // namespace sgi
