// kate: mode C++;
// SGI - Copyright (C) 2012-2015 FAST Protect, Andreas Roth

#pragma once
#include "object_type_info"

namespace sgi {
namespace details {

template<typename BaseType, typename Functor>
struct call_function_for_object_type_functor;


template<typename BaseType, typename OBJECT_TYPE, typename Functor>
void call_function_for_object_type(BaseType * baseObject, OBJECT_TYPE * object, Functor & op)
{
    op.accept(object);
    typedef typename object_info::object_type_info<OBJECT_TYPE>::derived_types derived_types;
    call_function_for_object_type_functor<BaseType, Functor> proxy(baseObject, op);
    details::for_each_type<derived_types>(proxy);
}

template<typename BaseType, typename Functor>
void call_function_for_object_type(BaseType * baseObject, Functor & op)
{
    call_function_for_object_type<BaseType, BaseType, Functor>(baseObject, baseObject, op);
}

template<typename BaseType, typename Functor>
struct call_function_for_object_type_functor
{
    BaseType * _obj;
    Functor & _op;
    call_function_for_object_type_functor(BaseType * obj, Functor & op) : _obj(obj), _op(op) {}
    template<typename T>
    bool operator()()
    {
        typedef typename object_info::object_type_info<BaseType>::object_caster object_caster;
        T * obj = object_caster::template cast<T>(_obj);
        if(obj) {
            _op.decend(obj);
            call_function_for_object_type<BaseType, T, Functor>(_obj, obj, _op);
            _op.ascend(obj);
        }
        // continue with next type until we found one matching type
        return (obj == NULL);
    }
};
} // namespace details
} // namespace sgi
