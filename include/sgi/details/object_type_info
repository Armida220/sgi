// kate: syntax C++11;
// SGI - Copyright (C) 2012-2015 FAST Protect, Andreas Roth

#pragma once

#include "type_list"
#include "caster"

namespace sgi {
namespace details {
template<typename BASE, typename DERIVED=sgi::details::type_list<>, typename OBJECT_CASTER=DynamicCaster >
struct object_type_info_impl {
    typedef BASE base_type;
    typedef DERIVED derived_types;
    typedef OBJECT_CASTER object_caster;
};

template<typename BASE, typename OBJECT_CASTER, typename DERIVED=sgi::details::type_list<> >
struct object_type_info_impl_with_caster {
    typedef BASE base_type;
    typedef DERIVED derived_types;
    typedef OBJECT_CASTER object_caster;
};

} // namespace details

namespace object_info {
    template<typename BASE>
    struct object_type_info : public sgi::details::object_type_info_impl<BASE> { };
}

#define SGI_OBJECT_INFO_BEGIN(__type) \
    template<> struct ::sgi::object_info::object_type_info<__type> : sgi::details::object_type_info_impl_with_caster<__type, sgi::DynamicCaster, \
        ::sgi::details::type_list<
#define SGI_OBJECT_INFO_BEGIN_EX(__type, __caster) \
    template<> struct ::sgi::object_info::object_type_info<__type> : sgi::details::object_type_info_impl_with_caster<__type, __caster, \
        ::sgi::details::type_list<

#define SGI_OBJECT_INFO_END() \
    > > {};

} // namespace sgi
