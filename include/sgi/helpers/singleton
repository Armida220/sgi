// kate: syntax C++11;

#pragma once


namespace sgi {
namespace helpers {

template<typename T>
class SingletonT {
private:
    // use this helper class to gain access
    // to protected constructor and destructor
    class TCTorDTorAccess: public T
    {
    public:
        TCTorDTorAccess() {}
        ~TCTorDTorAccess() {}
    };
public:
    enum InstanceAction {
        InstanceActionGetOrCreate,
        InstanceActionGet,
        InstanceActionErase
    };
    typedef T value_type;
    SingletonT()
        : _instance(NULL)
    {
    }
    ~SingletonT()
    {
    }
    T * instance(InstanceAction action=InstanceActionGetOrCreate)
    {
        switch(action)
        {
        default:
        case InstanceActionGetOrCreate:
            if(!_instance)
                _instance = new TCTorDTorAccess;
            break;
        case InstanceActionGet:
            // do nothing special here, just return the current pointer
            break;
        case InstanceActionErase:
            if(_instance)
                delete (TCTorDTorAccess*)_instance;
            _instance = NULL;
            break;
        }
        return _instance;
    }
private:
    T * _instance;
};

} // namespace helpers
} // namespace sgi
