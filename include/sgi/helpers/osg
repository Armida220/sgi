// kate: syntax C++11;
// SGI - Copyright (C) 2012-2015 FAST Protect, Andreas Roth

#pragma once

#include <sstream>
#include <iomanip>

#include <osg/Vec4f>
#include <osg/Vec4d>
#include <osg/Vec3>
#include <sgi/helpers/rtti>

namespace osg {
    class Referenced;
    class Object;
    class Observer;
    class EllipsoidModel;
    class Quat;
    class Node;
    class Drawable;
    class ObserverNodePath;
    class Matrixf;
    class Matrixd;
    class Image;

    typedef std::vector< Node* > NodePath;

    template<typename VT>
    class BoundingBoxImpl;

    typedef BoundingBoxImpl<Vec3f> BoundingBoxf;
    typedef BoundingBoxImpl<Vec3d> BoundingBoxd;

#ifdef OSG_USE_FLOAT_BOUNDINGBOX
    typedef BoundingBoxf BoundingBox;
#else
    typedef BoundingBoxd BoundingBox;
#endif

    template<typename VT>
    class BoundingSphereImpl;

    typedef BoundingSphereImpl<Vec3f> BoundingSpheref;
    typedef BoundingSphereImpl<Vec3d> BoundingSphered;

#ifdef OSG_USE_FLOAT_BOUNDINGSPHERE
    typedef BoundingSpheref BoundingSphere;
#else
    typedef BoundingSphered BoundingSphere;
#endif
}

class QImage;

namespace sgi {
    namespace osg_helpers {

/** Makes an HTML color ("#rrggbb" or "#rrggbbaa") from an OSG color. */
template<typename T>
inline std::string vec4fToHtmlColor( const T& c )
{
    std::stringstream buf;
    buf << "#";
    buf << std::hex << std::setw(2) << std::setfill('0') << (int)(c.r()*255.0f);
    buf << std::hex << std::setw(2) << std::setfill('0') << (int)(c.g()*255.0f);
    buf << std::hex << std::setw(2) << std::setfill('0') << (int)(c.b()*255.0f);
    if ( c.a() < 1.0f )
        buf << std::hex << std::setw(2) << std::setfill('0') << (int)(c.a()*255.0f);
    std::string ssStr;
    ssStr = buf.str();
    return ssStr;
}

// create an empty enum for the string representation of the
// osg::NodeMask (which is a typedef to unsigned int).
enum osgNodeMask { };
// extra type for GL constants
enum GLConstant { };

// extra type for GL modes values
enum GLModeValue { };
enum GLModeOverrideValue { };

std::string getObjectTypename(const osg::Referenced * object);
std::string getObjectTypename(const osg::Observer * object);
std::string getObjectTypename(const osg::Object * object);
std::string getObjectName(const osg::Referenced * object);
std::string getObjectName(const osg::Observer * object);
std::string getObjectName(const osg::Object * object, bool includeAddr=false);

std::string getObjectNameAndType(const osg::Referenced * object);
std::string getObjectNameAndType(const osg::Observer * object);
std::string getObjectNameAndType(const osg::Object * object, bool includeAddr=false);

inline sgi::Color osgColor(const osg::Vec4f & c)
{
    return sgi::Color(c.r(), c.g(), c.b(), c.a());
}

inline ::osg::Vec4f osgColor(const sgi::Color & c)
{
    return ::osg::Vec4f(c.r, c.g, c.b, c.a);
}

std::string glValueName(unsigned n);
std::string glOverrideValueName(unsigned n);
std::string clearMaskToString(unsigned clearMask);

const osg::EllipsoidModel & getDefaultEllipsoid();

osg::Vec3d fromECEFToXYZ(const osg::EllipsoidModel & ellipsoid, const osg::Vec3d & coord);
osg::Vec3d fromXYZToECEF(const osg::EllipsoidModel & ellipsoid, const osg::Vec3d & v);
osg::Vec3d fromECEFToXYZ(const osg::Vec3d & coord);
osg::Vec3d fromXYZToECEF(const osg::Vec3d & v);

void getHPRFromQuat(const osg::Quat& q, double &h, double &p, double &r);
void writePrettyHTML(std::basic_ostream<char>& os, const osg::Vec2f & v);
void writePrettyHTML(std::basic_ostream<char>& os, const osg::Vec3f & v);
void writePrettyHTML(std::basic_ostream<char>& os, const osg::Vec4f & v);
void writePrettyHTML(std::basic_ostream<char>& os, const osg::Vec2d & v);
void writePrettyHTML(std::basic_ostream<char>& os, const osg::Vec3d & v);
void writePrettyHTML(std::basic_ostream<char>& os, const osg::Vec4d & v);
void writePrettyHTML(std::basic_ostream<char>& os, const osg::Quat & q);
void writePrettyHTML(std::basic_ostream<char>& os, const osg::NodePath & path);

void writePrettyHTML(std::basic_ostream<char>& os, const osg::ObserverNodePath & path);

void writePrettyPositionHTML(std::basic_ostream<char>& os, const osg::Vec3 & v, const osg::Node * refNode=NULL);
void writePrettyPositionHTML(std::basic_ostream<char>& os, const osg::Vec3 & v, const osg::Drawable * refDrawable=NULL);
void writePrettyRotationHTML(std::basic_ostream<char>& os, const osg::Quat & q);
void writePrettyHTML(std::basic_ostream<char>& os, const osg::BoundingSphere & bs, const osg::Node * refNode=NULL);
void writePrettyHTML(std::basic_ostream<char>& os, const osg::BoundingSphere * bs, const osg::Node * refNode=NULL);
void writePrettyHTML(std::basic_ostream<char>& os, const osg::BoundingBox & bb, const osg::Node * refNode);
void writePrettyHTML(std::basic_ostream<char>& os, const osg::BoundingBox & bb, const osg::Drawable * refDrawable);
void writePrettyHTML(std::basic_ostream<char>& os, const osg::BoundingBox * bb, const osg::Drawable * refDrawable);

enum MatrixUsageType
{
    MatrixUsageTypeGeneric = 0,
    MatrixUsageTypeModelView,
    MatrixUsageTypePerspective,
    MatrixUsageTypeLookAt,
    MatrixUsageTypeFrustum,
    MatrixUsageTypeOrtho,
};

void writePrettyHTML(std::basic_ostream<char>& os, const osg::Matrixd & mat, MatrixUsageType type, const osg::Node * refNode=NULL);
void writePrettyHTML(std::basic_ostream<char>& os, const osg::Matrixd & mat, MatrixUsageType type, const osg::Drawable * refDrawable);

bool osgImageToQImage(const osg::Image * image, QImage * qimage);

    } // namespace osg_helpers
} // namespace sgi
