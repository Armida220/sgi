// kate: syntax C++11;
// SGI - Copyright (C) 2012-2015 FAST Protect, Andreas Roth

#pragma once

#include "Export"
#include "helpers/singleton"

#if !defined(_WIN32)
#include <QtCore/QCoreApplication>
#endif
#include <QtCore/QLibrary>

namespace sgi {
    namespace autoload {
    class Qt
    {
    public:
        typedef void * PROC_ADDRESS;
        Qt()
        {
#ifdef _WIN32
            // on Win32 the terra3d-sgi.dll is in the same directory as the application
            // and no further path tricks are required.
            _library = new QLibrary(SGI_LIBRARY_NAME);
#else
            // on linux the terra3d-sgi.so is in the lib directory, but the application
            // is started from the bin directory. So a little trick is required to find
            // the library.
            QString libfile = QCoreApplication::applicationDirPath() + QString::fromLatin1("/../lib/" SGI_LIBRARY_NAME);
            _library = new QLibrary(libfile);
#endif
        }
        ~Qt()
        {
            delete _library;
        }
        QLibrary * library()
        {
            return _library;
        }
        PROC_ADDRESS getProcAddress(const char* procName)
        {
            return (_library)?(PROC_ADDRESS)_library->resolve(procName):NULL;
        }
        std::string libraryFilename() const
        {
            return (_library)?_library->fileName().toStdString():NULL;
        }
        std::string libraryError() const
        {
            return (_library)?_library->errorString().toStdString():std::string("Unknown");
        }
        typedef helpers::SingletonT<Qt> Singleton;
        typedef Singleton::InstanceAction InstanceAction;
        static Singleton::value_type * instance(InstanceAction action=Singleton::InstanceActionGetOrCreate)
        {
            static Singleton s_singleton;
            return s_singleton.instance(action);
        }

        static inline QLibrary * sgiLibrary()
        {
            return Qt::instance()->library();
        }
        static inline void * sgiLibraryProcAddress(const char * procName)
        {
            return Qt::instance()->getProcAddress(procName);
        }
        static inline void * sgiLibraryProcAddressNoLoad(const char * procName)
        {
            Qt * inst = Qt::instance(Singleton::InstanceActionGet);
            if(inst)
                return inst->getProcAddress(procName);
            else
                return NULL;
        }
        static inline std::string sgiLibraryName()
        {
            return std::string(SGI_LIBRARY_NAME);
        }
        static inline std::string sgiLibraryFilename()
        {
            return Qt::instance()->libraryFilename();
        }
        static inline bool sgiLibraryLoaded()
        {
            Qt * inst = Qt::instance(Singleton::InstanceActionGet);
            if(inst)
                return inst->library() != NULL;
            else
                return false;
        }
        static inline void sgiLibraryUnload()
        {
            Qt::instance(Singleton::InstanceActionErase);
        }

    private:
        QLibrary * _library;
    };


} } // namespace sgi::autoload
