// kate: syntax C++11;
/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
*/
//sgi - Copyright (C) 2012-2013 Andreas Roth

#pragma once

#include "plugins/SGIHostItemGenerator"
#include <list>

class QWidget;
class QDialog;

namespace terra3d {
    class Terra3DView;
}

namespace sgi {

class IContextMenu;
class IContextMenuInfo;
class SGIDataItemBase;
typedef osg::ref_ptr<SGIDataItemBase> SGIDataItemBasePtr;
typedef std::list<SGIDataItemBasePtr> SGIDataItemBasePtrList;

class IObjectLoggerDialogInfo : public osg::Referenced
{
public:
    virtual IContextMenu *  contextMenu(QWidget * parent, const SGIItemBase * item, IContextMenuInfo * info) = 0;
    virtual bool            showSceneGraphDialog(SGIItemBase * item) = 0;
    virtual void            triggerRepaint() = 0;
    virtual SGIHostItemBase * getView() = 0;
};

class IObjectLoggerDialog : public osg::Referenced
{
public:
    virtual QDialog *       getDialog() = 0;
    virtual bool            addItem(SGIItemBase * item, bool alsoChilds=true) = 0;
    virtual bool            addItems(const SGIItemBasePtrPath & path) = 0;
    virtual bool            removeItem(SGIItemBase * item) = 0;
    virtual bool            removeItems(const SGIItemBasePtrPath & path) = 0;
    virtual void            show() = 0;
    virtual void            hide() = 0;
    virtual bool            isVisible() = 0;

    virtual bool                addLogItem(SGIDataItemBase * item) = 0;
    virtual bool                removeLogItem(SGIDataItemBase * item, bool first) = 0;
};

typedef osg::ref_ptr<IObjectLoggerDialog> IObjectLoggerDialogPtr;
typedef osg::ref_ptr<IObjectLoggerDialogInfo> IObjectLoggerDialogInfoPtr;

class IObjectLogger : public osg::Object
{
public:
    IObjectLogger() : osg::Object() {}
    IObjectLogger(const IObjectLogger & rhs,const osg::CopyOp& copyop) : osg::Object(rhs, copyop) {}
    virtual bool                addItem(SGIItemBase * item, bool alsoChilds=true) = 0;
    virtual bool                addItems(const SGIItemBasePtrPath & path) = 0;
    virtual bool                removeItem(SGIItemBase * item) = 0;
    virtual bool                removeItems(const SGIItemBasePtrPath & path) = 0;
    virtual bool                isItemPresent(SGIItemBase * item) const = 0;
    virtual bool                getItems(SGIItemBasePtrVector & vector) = 0;
    virtual bool                getFields(SGIDataItemBasePtr & fields) = 0;
    virtual bool                getLog(SGIDataItemBasePtrList & list) = 0;

    virtual bool                addLogItem(SGIDataItemBase * item) = 0;

    virtual IObjectLoggerDialog * getDialog() = 0;
    virtual IObjectLoggerDialog * getOrCreateDialog(QWidget *parent, IObjectLoggerDialogInfo * info) = 0;
};

typedef osg::ref_ptr<IObjectLogger> IObjectLoggerPtr;

template<typename AUTOLOADCLASS>
inline IObjectLoggerDialog * showObjectLoggerDialogImpl(QWidget *parent, const SGIHostItemBase * object, IObjectLoggerDialogInfo * info=NULL)
{
    IObjectLoggerDialog * ret;
    typedef IObjectLoggerDialog * (*pfn)(QWidget *parent, const SGIHostItemBase * object, IObjectLoggerDialogInfo * info);
    pfn func = (pfn)AUTOLOADCLASS::sgiLibraryProcAddress("sgi_showObjectLoggerDialog");
    if(func)
        ret = func(parent, object, info);
    else
        ret = NULL;
    return ret;
}

template<typename AUTOLOADCLASS>
inline IObjectLoggerDialog * showObjectLoggerDialogImpl(QWidget *parent, SGIItemBase * item, IObjectLoggerDialogInfo * info=NULL)
{
    IObjectLoggerDialog * ret;
    typedef IObjectLoggerDialog * (*pfn)(QWidget *parent, SGIItemBase * item, IObjectLoggerDialogInfo * info);
    pfn func = (pfn)AUTOLOADCLASS::sgiLibraryProcAddress("sgi_showObjectLoggerDialogItem");
    if(func)
        ret = func(parent, item, info);
    else
        ret = NULL;
    return ret;
}

template<typename AUTOLOADCLASS, typename OBJECT_TYPE>
inline IObjectLoggerDialog * showObjectLoggerDialog(QWidget *parent, OBJECT_TYPE * object, IObjectLoggerDialogInfo * info=NULL)
{
    osg::ref_ptr<SGIHostItemBase> hostitem = SGIHostItemGenerator::generateHostItem(object);
    IObjectLoggerDialog * ret = showObjectLoggerDialogImpl<AUTOLOADCLASS>(parent, hostitem.get(), info);
    return ret;
}

template<typename AUTOLOADCLASS>
inline IObjectLoggerDialog * showObjectLoggerDialog(QWidget *parent, const SGIHostItemBase * item, IObjectLoggerDialogInfo * info=NULL)
{
    IObjectLoggerDialog * ret = showObjectLoggerDialogImpl<AUTOLOADCLASS>(parent, item, info);
    return ret;
}

template<typename AUTOLOADCLASS>
inline IObjectLoggerDialog * showObjectLoggerDialog(QWidget *parent, SGIItemBase * item, IObjectLoggerDialogInfo * info=NULL)
{
    IObjectLoggerDialog * ret = showObjectLoggerDialogImpl<AUTOLOADCLASS>(parent, item, info);
    return ret;
}

} // namespace sgi
